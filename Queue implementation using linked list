 #include <stdio.h>
 #include <stdlib.h>
 struct Node {
 int data;
 struct Node* next;
 };
 struct Queue {
 struct Node* front;
 struct Node* rear;
 };
 void enqueue(struct Queue* q, int data) {
 struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
 newNode->data = data;
 newNode->next = NULL;
 if (q->rear == NULL) {
 q->front = q->rear = newNode;
 return;
 }
 q->rear->next = newNode;
 q->rear = newNode;
 }
 void dequeue(struct Queue* q) {
 if (q->front == NULL) {
 printf("Queue is empty, cannot dequeue.\n");
 return;
 }
 struct Node* temp = q->front;
 q->front = q->front->next;
 if (q->front == NULL) {
 q->rear = NULL;
 }
 free(temp);
 }
 void display(struct Queue* q) {
 if (q->front == NULL) {
 printf("Queue is empty.\n");
 return;
}
 struct Node* temp = q->front;
 printf("Queue elements: ");
 while (temp != NULL) {
 printf("%d ", temp->data);
 temp = temp->next;
 }
 printf("\n");
 }
 int main() {
 struct Queue q;
 q.front = q.rear = NULL;
 int choice, value;
 while (1) {
 printf("1. Enqueue\n");
 printf("2. Dequeue\n");
 printf("3. Display\n");
 printf("4. Exit\n");
 printf("Enter your choice: ");
 scanf("%d", &choice);
 switch (choice) {
 case 1:
 printf("Enter value to enqueue: ");
 scanf("%d", &value);
 enqueue(&q, value);
 break;
 case 2:
 dequeue(&q);
 break;
 case 3:
 display(&q);
 break;
 case 4:
 exit(0);
 default:
 printf("Invalid choice!\n");
 }
 }
 return 0;
 }
